반복문은 특정 작업을 반복적으로 할 때 사용할 수 있는 구문

-for-
for문은 가장 기본적인 반복문
특정값에 변화를 주어가면서 정한 조건이 만족된다면 계속 반복함

ex)
for(let i = 0; i < 10; i++){
	console.log(i);
}

결과 
0
1
2
3
4
5
6
7
8
9

*구조
for (초기 구문; 조건 구문; 변화 구문;){
	코드
}

for문을 사용할 때 보통 i++를 해서 1씩 증감하는 형태로 사용

ex)
for (let i = 10; i>0; i--){
	console.log(i);
}

결과
10
9
8
7
6
5
4
3
2
1

i--를 하면 1씩 감소하는 형태의 코드가 가능함
for문은 숫자에 변화를 주어가면서 반복적으로 작업을 실행함

-배열과 for-
ex)
const names = ['멍멍이', '야옹이', '멍뭉이'];

for (let i=0; i < names.length; i++){
	console.log(names[i]);
}

결과 
멍멍이
야옹이
멍뭉이

names배열 안에 있는 원소들을 하나하나 나열 할 수 있음

-while-
while문은 특정 조건이 참이라면 계속해서 반복하는 반복문
for문은 특정 숫자를 가지고 숫자의 값을 비교하고 증감해주면서 반복을 한다면 while문은 조건을 확인만 하면서 반복
그러므로 조건문 내부에서 변화를 직접 주어야 함

ex)
let i = 0;
while (i<10){
	console.log(i);
	i++;
}

while문을 사용할때에는 조건문이 언젠가 false가 되도록 신경써야함
만약에 언젠간 fasle로 전환되지 않는다면 반복문이 끝나지 않고 계속 반복됨

-for...of-
for...of문은 배열에 관한 반복문을 돌리기 위해서 만들어진 반복문

ex)
let numbers = [10, 20, 30, 40, 50];
for(let number of numbers){
	console.log(number);
}

결과
10
20
30
40
50

-객체를 위한 반복문 for...in-
ex)
const doggy = {
	name: '멍멍이',
	sound: '멍멍',
	age: 2
}

console.log(Object.entries(doggy));
console.log(Object.keys(doggy));
console.log(Object.values(doggy));

결과
[Array(2), Array(2), Array(2)]
['name', 'sound', 'age']
['멍멍이', '멍멍', 2]

*함수의 역할
• Object.entries: [[키, 값], [키, 값]] 형태의 배열로 변환
• Object.keys: [키, 키, 키] 형태의 배열로 변환
• Object.values: [값, 값, 값] 형태의 배열로 변환

객체가 지니고 있는 값에 대하여 반복을 하고 싶다면 위 함수를 사용
for...in구문을 사용하셔도 됨

ex)
const doggy = {
  name: '멍멍이',
  sound: '멍멍',
  age: 2
};

for (let key in doggy) {
  console.log(`${key}: ${doggy[key]}`);
}

결과
name: 멍멍이
sound: age: 멍멍
age: 2

-break와 continue-
반복문 안에서는 break와 continue를 통하여 반복문에서 벗어나거나, 그 다음 루프를 돌게끔 할 수 있음
ex)
for (let i = 0; i < 10; i++) {
  if (i === 2) continue; // 다음 루프를 실행
  console.log(i);
  if (i === 5) break; // 반복문을 끝내기
}

결과 
0
1
2
3
4
5

i가 2일땐 continue를 하여 원래 console.log를 해야 하지만 그 코드를 수행하지 않고 바로 3으로 넘어감

i가 5일땐 break를 하여 반복문을 종료

