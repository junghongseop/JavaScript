-forEach-
forEach는 가장 쉬운 배열 내장함수임
for문을 태체 시킬 수 있음

ex)
const superheroes = ['아이언맨', '캡틴 아메리카', '토르', '스파이더맨'];

배열 안에 있는 모든 원소들을 모두 출력해야 한다면 for문을 사용하면 됨
ex)
const superheroes = ['아이언맨', '캡틴 아메리카', '토르', '스파이더맨'];

for(let i = 0; i < superheroes.length; i++){
	console.log(superheroes[i]);
}

배열의 forEach함수를 사용하면
ex)
const superheroes = ['아이언맨', '캡틴 아메리카', '토르', '닥터 스트레인지'];

superheroes.forEach(hero => {
  console.log(hero);
});

forEach함수의 파라미터로는 각 원소에 대하여 처리하고 싶은 코드를 함수로 넣어줌
함수형태의 파라미터를 전달하는 것을 콜백함수라고 부름
함수를 등록해주면 forEach가 실행해줌

-map-
map은 배열 안의 각 원소를 변환 할때 사용되며, 이에서 새로운 배열이 만들어짐
ex)
const array = [1, 2, 3, 4, 5, 6, 7, 8];

const squared = [];
for (let i = 0; i < array.length; i++){
	squard.push(array[i] * array[i]);
}

console.log(squard);

forEach ex)
const array = [1, 2, 3, 4, 5, 6, 7, 8];

const squared = [];

array.forEach(n => {
  squared.push(n * n);
});

console.log(squared);

결과 
[1, 4, 9, 16, 25, 36, 49, 64];

map ex)
const array = [1, 2, 3, 4, 5, 6, 7, 8];

const square = n => n * n;
const squared = array.map(square);	//array.map함수를 사용 할 때 square를 변화함수로 사용해 내부의 모든값에 대하여 console.log(squared);			  제곱을 해서 새로운 배열을 생성

결과
[1, 4, 9, 16, 25, 36, 49, 64];

map함수의 파라미터로는 변화를 주는 함수를 전달=변화 함수
변화함수를 꼭 이름을 붙여서 선언 할 필요 없음
ex)
const squared = array.map(n => n * n);
console.log(squared);

-indexOf-
indexOf는 원하는 항목이 몇번째 원소인지 찾아주는 함수

ex)
const superheroes = ['아이언맨', '캡틴 아메리카', '토르', '닥터 스트레인지'];
const index = superheroes.indexOf('토르');
console.log(index);

결과 
2

-findIndex-
배열 안에 있는 값이 숫자, 문자열 또는 불리언이라면 찾고자하는 항목이 몇번쨰 원소인지 알아내려면 IndexOf를 사용
배열 안에 있는 값이 객체이거나 배열이라면 indexOf로 찾을 수 없음

ex)
const todos = [
  {
    id: 1,
    text: '자바스크립트 입문',
    done: true
  },
  {
    id: 2,
    text: '함수 배우기',
    done: true
  },
  {
    id: 3,
    text: '객체와 배열 배우기',
    done: true
  },
  {
    id: 4,
    text: '배열 내장함수 배우기',
    done: false
  }
];

const index = todos.findIndex(todo => todo.id === 3);
console.log(index);

결과
2

id가 3인 객체가 몇번째인지 찾으려면 findIndex함수에 검사하고자 하는 조건을 반환하는 함수를 넣어서 찾을 수 있음

-find-
find함수는 findIndex랑 비슷한데 찾아낸 값이 몇번째인지 알아내는 것이 아니라, 찾아낸 값 자체를 반환
ex)
const todos = [
  {
    id: 1,
    text: '자바스크립트 입문',
    done: true
  },
  {
    id: 2,
    text: '함수 배우기',
    done: true
  },
  {
    id: 3,
    text: '객체와 배열 배우기',
    done: true
  },
  {
    id: 4,
    text: '배열 내장함수 배우기',
    done: false
  }
];

const todo = todos.find(todo => todo.id === 3);
console.log(todo);

결과
{id: 3, text: "객체와 배열 배우기", done: true}

-filter-
filter함수는 배열에서 특정 조건을 만족하는 값들만 따로 추출하여 새로운 배열로 만듦
ex)
const todos = [
  {
    id: 1,
    text: '자바스크립트 입문',
    done: true
  },
  {
    id: 2,
    text: '함수 배우기',
    done: true
  },
  {
    id: 3,
    text: '객체와 배열 배우기',
    done: true
  },
  {
    id: 4,
    text: '배열 내장함수 배우기',
    done: false
  }
];

const tasksNotDone = todos.filter(todo => todo.done === false);
console.log(tasksNotDone);

결과
[
  {
    id: 4,
    text: '배열 내장 함수 배우기',
    done: false
  }
];

filter함수에 넣는 파라미터는 조건을 검사하는 함수를 넣어주며 함수의 파라미터로 각 원소의 값을 받아오게 됨

ex)
const tasksNotDone = todos.filter(todo => !todo.done);

filter에 넣어준 함수에서 true를 반환하면 새로운 배열에 따로 추출을 해줌

-splice-
splice는 배열에서 특정 항목을 제거할 때 사용
ex)
const numbers = [10, 20, 30, 40];
const index = numbers.indexOf(30);
numbers.splice(index, 1);
console.log(numbers);

결과
[10, 20, 40]

spilce를 사용할 때 첫번쨰 파라미터는 어떤 인텍스부터 지울지를 의미하고 두번째 파라미터는 그 인덱스부터 몇개를 지울지를 의미

-slice-
slice는 splice랑 조금 비슷함
배열을 잘라낼때 사용
중요한 점은 기존의 배열은 건들이지 않는다는 것

ex)
const numbers = [10, 20, 30, 40];
const sliced = numbers.slice(0, 2); // 0부터 시작해서 2전까지

console.log(sliced); // [10, 20]
console.log(numbers); // [10, 20, 30, 40]

slice에 두개의 파라미터를 넣게 되는데 첫번째 파라미터는 어디서부터 자를지 두번째 파라미터는 어디까지 자를지를 의미

-shift와 pop-
shift와 pop은 비슷하지만 다름
shift는 첫번째 원소를 배열에서 추출해줌(추출하는 과정의 배열에서 해당 원소는 사라짐)

shift ex)
const numbers = [10, 20, 30, 40];
const value = numbers.shift();
console.log(value);
console.log(numbers);

결과
10
[20, 30, 40]

pop ex)
const numbers = [10, 20, 30, 40];
const value = numbers.pop();
console.log(value);
console.log(numbers);

결과
40
[10, 20, 30]

pop은 push의 반대로 생각하면 됨
push는 배열의 맨 마지막에 새 항목을 추가
pop은 맨 마지막 항목을 추출

-unshift-
unshift는 shift의 반대
배열의 맨 앞에 새 원소를 추가함
ex)
const numbers = [10, 20, 30, 40];
numbers.unshift(5);
console.log(numbers);

결과
[5, 10, 20, 30, 40]

-concat-
concat은 여러개의 배열을 하나의 배열로 합쳐줌
ex)
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const concated = arr1.concat(arr2);

console.log(concated);

결과 
[1, 2, 3, 4, 5, 6]

concat함수는 arr1과 arr2에 변화를 주지 않음

-join-
join은 배열 안의 값들을 문자열 형태로 합쳐줌
ex)
const array = [1, 2, 3, 4, 5];
console.log(array.join()); // 1,2,3,4,5
console.log(array.join(' ')); // 1 2 3 4 5
console.log(array.join(', ')); // 1, 2, 3, 4, 5

-reduce-
ex)
const numbers = [1, 2, 3, 4, 5];

let sum = 0;
numbers.forEach(n => {
  sum += n;
});
console.log(sum);

결과 
15

sum을 계산하기 위해서 사전에 sum을 선언하고, forEach를 통하여 계속해서 덧셈을 해주었음

reduce 함수 ex)
const numbers = [1, 2, 3, 4, 5];
let sum = array.reduce((accumulator, current) => accumulator + current, 0);

console.log(sum);

reduce함수에는 두개의 파라미터를 전달
첫번째 파라미터는 accumulator와 current를 파라미터로 가져와서 결과를 반환하는 콜백함수
두번쨰 파라미터는 reduce함수에서 사용할 초깃값을 의미

ex)
const numbers = [1, 2, 3, 4, 5];
let sum = numbers.reduce((accumulator, current) => {
  console.log({ accumulator, current });
  return accumulator + current;
}, 0);

console.log(sum);

결과
{accumulator: 0, current: 1}
{accumulator: 1, current: 2}
{accumulator: 3, current: 3}
{accumulator: 6, current: 4}
{accumulator: 10, current: 5}
15

배열을 처음부터 끝까지 반복하면서 우리가 전달한 콜백함수가 호출이 됨
가장 처음엔 accumulator값이 0
값이 0인 이유는 두번째 파라미터인 초깃값으로 0을 설정했기 때문임

처음 콜백함수가 호출되면, 0+1을 해서 1이 반환
1이 반환되면 다음 콜백함수가 호출 될때 accumlator값으로 사용

콜백함수가 두번쨰로 호출될땐 1+2를 해서 3이되고 값이 세번째로 호출될 때의 accumulator이 됨

reduce를 사용해서 평균도 계산할수 있음
평균을 계산하려면 가장 마지막 숫자를 더하고 배열의 length로 나누어주어야 함

ex)
const numbers = [1, 2, 3, 4, 5];
let sum = numbers.reduce((accumulator, current, index, array) => {
  if (index === array.length - 1) {
    return (accumulator + current) / array.length;
  }
  return accumulator + current;
}, 0);

console.log(sum);	//3

reduce에서 사용한 콜백함수에서는 추가 파라미터로 index와 array를 받아왔음
index는 현재 처리하고 있는 항목이 몇번째 인지 가르키고 array는 현재 처리하고 있는 배열 자신을 의미








