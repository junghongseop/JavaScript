-객체 생성자- 
객체 생성자는 함수를 통해서 새로운 객체를 만들고 그 안에 넣고 싶은 값 혹은 함수들을 구현 할 수 있게 해줌
ex)
function Animal(type, name, sound) {
  this.type = type;
  this.name = name;
  this.sound = sound;
  this.say = function() {
    console.log(this.sound);
  };
}

const dog = new Animal('개', '멍멍이', '멍멍');
const cat = new Animal('고양이', '야옹이', '야옹');

dog.say();
cat.say();

결과
멍멍
야옹

객체 생성자를 사용 할 때는 보통 함수의 이름을 대문자로 시작 
새로운 객체를 만들 때에는 new키워드를 앞에 붙여주어야 함

dog가 가지고 있는 say함수와 cat이 가지고 있는 수행하는 코드가 똑같음에도 불구하고 객체가 생성 될 때 마다 함수도 새로 만들어져서 this.say로 설정이 되고 있음

같은 객체 생성자 함수를 사용하는 경우
특정 함수 또는 값을 재사용 할 수 있는데 이는 프로토타입

-프로토타입-
*프로토타입 구조
.prototype.[원하는키]= 코드를 입력하여 설정할 수 있음

ex)
function Animal(type, name, sound) {
  this.type = type;
  this.name = name;
  this.sound = sound;
}

Animal.prototype.say = function() {
  console.log(this.sound);
};
Animal.prototype.sharedValue = 1;

const dog = new Animal('개', '멍멍이', '멍멍');
const cat = new Animal('고양이', '야옹이', '야옹');

dog.say();
cat.say();

console.log(dog.sharedValue);
console.log(cat.sharedValue);

결과
멍멍
야옹
1
1

-객체 생성자 상속받기-
function Animal(type, name, sound) {
  this.type = type;
  this.name = name;
  this.sound = sound;
}

Animal.prototype.say = function() {
  console.log(this.sound);
};
Animal.prototype.sharedValue = 1;

function Dog(name, sound) {
  Animal.call(this, '개', name, sound);
}
Dog.prototype = Animal.prototype;

function Cat(name, sound) {
  Animal.call(this, '고양이', name, sound);
}
Cat.prototype = Animal.prototype;

const dog = new Dog('멍멍이', '멍멍');
const cat = new Cat('야옹이', '야옹');

dog.say();	//멍멍
cat.say();	//야옹

새로 만든 Dog와 Cat함수에서 Animal.call을 호출해주고 있음
첫번째 인자에는 this를 넣어주어야 하고, 이후에 Animal객체 생성자 함수에서 필요로하는 파라미터를 넣어주어야 함

prototype을 공유해야 하기 때문에 상속받은 객체 생성자 함수를 만들고 나서 prototype값을 Animal.prototype으로 설정해주었음

-클래스-
ES6에서부터는 class라는 문법이 추가됨
객체 생성자로 구현했던 코드를 조금 더 명확하고 깔끔하게 구현 할 수 있게 해줌
추가적으로 상속도 훨씬 쉽게 해줄 수 있음 

ex)
class Animal {
  constructor(type, name, sound) {
    this.type = type;
    this.name = name;
    this.sound = sound;
  }
  say() {
    console.log(this.sound);
  }
}

const dog = new Animal('개', '멍멍이', '멍멍');
const cat = new Animal('고양이', '야옹이', '야옹');

dog.say();	//멍멍
cat.say();	//야옹

say라는 함수를 클래스 내부에 선언
클래스 내부의 함수를 '메서드'라고 부름
메서드를 만들면 자동으로 prototype으로 등록이 됨

ex)
class Animal {
  constructor(type, name, sound) {
    this.type = type;
    this.name = name;
    this.sound = sound;
  }
  say() {
    console.log(this.sound);
  }
}

class Dog extends Animal {
  constructor(name, sound) {
    super('개', name, sound);
  }
}

class Cat extends Animal {
  constructor(name, sound) {
    super('고양이', name, sound);
  }
}

const dog = new Dog('멍멍이', '멍멍');
const cat = new Cat('야옹이', '야옹');

dog.say();	//멍멍
cat.say();	//야옹

상속을 할 때는 extends키워드를 사용함
constructor에서 사용하는 super()함수가 상속받은 클래스의 생성자를 카르킴

ex)
class Animal {
  constructor(type, name, sound) {
    this.type = type;
    this.name = name;
    this.sound = sound;
  }
}

class Dog extends Animal {
  constructor(name, sound) {
    super('개', name, sound);
  }
}

class Cat extends Animal {
  constructor(name, sound) {
    super('고양이', name, sound);
  }
}

const dog = new Dog('멍멍이', '멍멍');
const dog2 = new Dog('왈왈이', '왈왈');
const cat = new Cat('야옹이', '야옹');
const cat2 = new Cat('냐옹이', '냐옹');

dog.say();	//멍멍
dog2.say();	//왈왈
cat.say();	//야옹
cat2.say();	//냐옹

