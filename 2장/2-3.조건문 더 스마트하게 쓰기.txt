-특정 값이 여러 값중 하나인지 확인해야 할 때-

일반 함수
function isAnimal(text){
	return(
		text === '고양이' || text === '개' || text === '거북이' || text === '너구리');
}

console.log(isAnimal('개'));	//true
console.log(isAnimal('노트북'));	//false

비교해야 할 값이 많아질 수록 코드가 길어짐

해결 방법은 배열을 만들고 배열의 includes함수를 사용하는 것

includes함수
function isAnimal(name){
	const animals = ['고양이', '개', '거북이', '너구리'];
	return animals.includes(name);
}

console.log(isAnimal('개'));	//true
console.log(isAnimal('노트북'));	//false

화살표 함수
const isAnimal = name => ['고양이', '개', '거북이', '너구리'].includes(name);

console.log(isAnimal('개'));	//true
console.log(isAnimal('노트북'));	//false

-값에 따라 다른 결과물을 반환 해야 할 때-

일반 함수
function getSound(animal){
	if(animal === '개') return '멍멍';
	if(animal === '고양이) return '야옹';
	if(animal === '참새') return '짹짹';
	if(animal === '비둘기') return '구구';

	return '...?';
}

console.log(getSound('개'));	//멍멍
console.log(getSound('비둘기'));	//구구

switch case문
function getSound(animal){
	switch(animal){
		case '개':
			return '멍멍';
		case '고양이': 
			return '야옹';
		case '참새':
			return '짹짹';
		case '비둘기':
			return '구구';
		default:
			return '...?';
	}
}

console.log(getSound('개'));	//멍멍
console.log(getSound('비둘기'));	//구구

switch문에서 return을 할때에는 break를 생략해도 됨

좀 더 깔끔한 작성 방법
function getSound(animal){
	const sounds = {
		개: '멍멍',
		고양이: '야옹',
		참새: '짹짹',
		비둘기: '구구'
	};
	return sounds[animal] || '...?';
}

console.log(getSound('개'));	//멍멍
console.log(getSound('비둘기'));	//구구

특정 값에 따라 반환해야 하는 값이 다른 조건이 여러가지 있을 때는 객체를 활용하면 좋음

객체에 함수를 넣을 시
function makeSound(animal){
	const tasks = {
		개() {
			console.log('멍멍');
		},
		고양이() {
			console.log('야옹');
		},
		참새(){
			console.log('짹짹');
		},
		비둘기(){
			console.log('구구');
		}
	};
	if(!tasks[animal]){
		console.log('...?');
		return;
	}
	tasks[animal]();
}

console.log(makeSound('개'));		//멍멍
console.log(makeSound('비둘기'));	//구구