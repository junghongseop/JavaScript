-spread-
객체 혹은 배열을 펼칠수있음
ex)
const slime={
	name: '슬라임'
};

const cuteSlime={
	name: '슬라임',
	attribute: 'cute'
};

const purpleCuteSlime={
	name: '슬라임',
	attribute: 'cute',
	color: 'purple'
};

console.log(slime);		//Object {name: "슬라임"}
console.log(cuteSlime);		//Object {name: "슬라임", attribute: "cute"}
console.log(purpleCuteSlime);	//Object {name: "슬라임", attribute: "cute", color: "purple"}

slime이라는 객체를 선언
cuteSlime이라는 객체를 만들었는데, 기존에 선언한 slime을 건들이지 않고 새로운 객체를 만들어서 slime이 가지고 있는 값을 그대로 사용
purpleCuteSlime이라는 객체를 만들었는데, cuteSlime이 가지고 있는 속성을 그대로 사용하면서 color가 추가

기존의 것을 건들이지 않고 새로운 객체를 만드는데 이에 유요한 문법이 spread

spread문법
const slime={
	name: '슬라임'
};

const cuteSlime={
	...slime,
	attribute: 'cute'
};

const purpleCuteSlime={
	...cuteSlime,
	color: 'purple'
};

console.log(slime);
console.log(cuteSlime);
console.log(purpleCuteSlime);

...문자가 spread연산자

spread연산자를 배열에서
const animals = ['개', '고양이', '참새'];
const anotherAnimals = [...animals, '비둘기'];
console.log(animals);				//["개", "고양이", "참새"]
console.log(anotherAnimals);			//["개", "고양이", "참새", "비둘기"]

기존의 animals는 건들이지 않으면서, 새로운 anotherAnimals배열에 animals가 가지고 있는 내용을 모두 집어 넣고, '비둘기'라는 항목을 추가적으로 넣었음

배열에서 spread연산자를 여러번 사용 할 수도 있음
const numbers = [1, 2, 3, 4, 5];

const orNumbers = [...numbers, 100, ...numbers];
console.log(orNumbers);		//[1, 2, 3, 4, 5, 100, 1, 2, 3, 4, 5]

-rest-
rest는 객체, 배열, 그리고 함수의 파라미터에서 사용이 가능

-객체에서의 rest-
ex)
const purpleCuteSlime={
	name: '슬라임',
	attribute: 'cute',
	color: 'purple'
};

const{color, ...rest} = purpleCuteSlime;
console.log(color);	//purple
console.log(rest);	//Object {name: "슬라임", attribute: "cute"}

rest안에 name값을 제외한 값이 들어있음

rest는 객체와 배열에서 사용 할 때는 비구조화 할당 문법과 함께 사용

-배열에서의 rest-
ex)
const numbers = [0, 1, 2, 3, 4, 5, 6];

const [one, ...rest] = numbers;

console.log(one);	//0
console.log(rest);	//[1, 2, 3, 4, 5, 6]

배열 비구조화 할당을 통하여 원하는 값을 밖으로 꺼내고, 나머지 값을 rest안에 넣음

-함수 파라미터에서의 rest-
ex)
function sum(a, b, c, d, e, f, g) {
  let sum = 0;
  if (a) sum += a;
  if (b) sum += b;
  if (c) sum += c;
  if (d) sum += d;
  if (e) sum += e;
  if (f) sum += f;
  if (g) sum += g;
  return sum;
}

const result = sum(1, 2, 3, 4, 5, 6);
console.log(result);

sum함수는 7개의 파라미터를 받아오는데 아래에서 사용할때에는 6개만 넣어줬음
g값이 undefined가 되기 때문에 sum에 더하는 과정에서 += undefined를 하게 되면 결과는 NaN이 됨

함수의 파라미터가 몇개가 될지 모르는 상황에서 rest파라미터를 사용하면 매우 유용
function sum(...rest){
	return rest;
}

const result = sum(1, 2, 3, 4, 5, 6);
console.log(result);	//[1, 2, 3, 4, 5, 6]

result가 가르키고 있는 것은 함수에서 받아온 파라미터들로 이루어진 배열

ex)
function sum(...rest) {
  return rest.reduce((acc, current) => acc + current, 0);
}

const result = sum(1, 2, 3, 4, 5, 6);
console.log(result); // 21

-함수 인자와 spread-
const myFunction(a) { // 여기서 a 는 파라미터
  console.log(a); // 여기서 a 는 인자
}

myFunction('hello world'); // 여기서 'hello world' 는 인자

함수에서 값을 읽을때, 그 값들은 파라미터라고 부름
함수에서 값을 넣어줄 때, 그 값들은 인자라고 부름

function sum(...rest) {
  return rest.reduce((acc, current) => acc + current, 0);
}

const numbers = [1, 2, 3, 4, 5, 6];
const result = sum(
  numbers[0],
  numbers[1],
  numbers[2],
  numbers[3],
  numbers[4],
  numbers[5]
);
console.log(result);

spread를 사용
function sum(...rest) {
  return rest.reduce((acc, current) => acc + current, 0);
}

const numbers = [1, 2, 3, 4, 5, 6];
const result = sum(...numbers);
console.log(result);


